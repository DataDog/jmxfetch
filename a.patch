diff --git a/src/test/java/org/datadog/jmxfetch/TestApp.java b/src/test/java/org/datadog/jmxfetch/TestApp.java
index f9c5c34..0b4ca1b 100644
--- a/src/test/java/org/datadog/jmxfetch/TestApp.java
+++ b/src/test/java/org/datadog/jmxfetch/TestApp.java
@@ -57,8 +57,8 @@ public void testBeanTags() throws Exception {
         run();
         LinkedList<HashMap<String, Object>> metrics = getMetrics();

-        // 14 = 13 metrics from java.lang + 1 metric explicitly defined in the yaml config file
-        assertEquals(14, metrics.size());
+        // 11 = 10 metrics from java.lang + 1 metric explicitly defined in the yaml config file
+        assertEquals(11, metrics.size());

         List<String> tags = Arrays.asList(
             "type:SimpleTestJavaApp",
@@ -87,8 +87,8 @@ public void testRegexpAliasing() throws Exception {

         // Assertions

-        // 15 metrics = 13 from `java.lang` + 2 from the user configuration file
-        assertEquals(15, metrics.size());
+        // 12 metrics = 10 from `java.lang` + 2 from the user configuration file
+        assertEquals(12, metrics.size());

         // Metric aliases are generated from `alias_match`
         List<String> tags = Arrays.asList(
@@ -117,8 +117,8 @@ public void testNoAliasOnDetailedAttribute() throws Exception {

         // Assertions

-        // 14 metrics = 13 from `java.lang` + 1 from the user configuration file
-        assertEquals(14, metrics.size());
+        // 11 metrics = 10 from `java.lang` + 1 from the user configuration file
+        assertEquals(11, metrics.size());

         // Metric aliases are generated from `alias_match`
         List<String> tags = Arrays.asList(
@@ -148,8 +148,8 @@ public void testCassandraBean() throws Exception {
         run();
         LinkedList<HashMap<String, Object>> metrics = getMetrics();

-        // 14 = 2*13 metrics from java.lang + 2*1 metric explicitly defined in the yaml config file
-        assertEquals(28, metrics.size());
+        // 22 = 2*10 metrics from java.lang + 2*1 metric explicitly defined in the yaml config file
+        assertEquals(22, metrics.size());

         // Assert compliancy with CASSANDRA-4009
         List<String> tags = Arrays.asList(
@@ -184,8 +184,8 @@ public void testCassandraDeprecatedBean() throws Exception {
         run();
         LinkedList<HashMap<String, Object>> metrics = getMetrics();

-        // 14 = 13 metrics from java.lang + 1 metric explicitly defined in the yaml config file
-        assertEquals(14, metrics.size());
+        // 11 = 10 metrics from java.lang + 1 metric explicitly defined in the yaml config file
+        assertEquals(11, metrics.size());

         List<String> tags = Arrays.asList(
             "type:ColumnFamilies",
@@ -207,8 +207,8 @@ public void testDomainInclude() throws Exception {
         run();
         LinkedList<HashMap<String, Object>> metrics = getMetrics();

-        // First filter 29 = 13 metrics from java.lang + 16 metrics implicitly defined
-        assertEquals(29, metrics.size());
+        // First filter 26 = 10 metrics from java.lang + 16 metrics implicitly defined
+        assertEquals(26, metrics.size());
     }

     @Test
@@ -225,8 +225,8 @@ public void testDomainExclude() throws Exception {
         run();
         LinkedList<HashMap<String, Object>> metrics = getMetrics();

-        // First filter 14 = 13 metrics from java.lang + 2 metrics explicitly define- 1 implicitly defined in the exclude section
-        assertEquals(14, metrics.size());
+        // First filter 11 = 10 metrics from java.lang + 2 metrics explicitly define- 1 implicitly defined in the exclude section
+        assertEquals(11, metrics.size());
     }

     @Test
@@ -244,8 +244,8 @@ public void testDomainRegex() throws Exception {
         run();
         LinkedList<HashMap<String, Object>> metrics = getMetrics();

-        // First filter 15 = 13 metrics from java.lang + 3 metrics explicitly defined - 1 implicitly defined in exclude section
-        assertEquals(15, metrics.size());
+        // First filter 12 = 10 metrics from java.lang + 3 metrics explicitly defined - 1 implicitly defined in exclude section
+        assertEquals(12, metrics.size());
     }

     @Test
@@ -260,8 +260,8 @@ public void testParameterMatch() throws Exception {
         run();
         LinkedList<HashMap<String, Object>> metrics = getMetrics();

-        // 13 default metrics from java.lang
-        assertEquals(13, metrics.size());
+        // 10 default metrics from java.lang
+        assertEquals(10, metrics.size());
     }

     @Test
@@ -276,8 +276,8 @@ public void testListParamsInclude() throws Exception {
         run();
         LinkedList<HashMap<String, Object>> metrics = getMetrics();

-        // First filter 14 = 13 metrics from java.lang + 1 metrics explicitly defined
-        assertEquals(14, metrics.size());
+        // First filter 11 = 10 metrics from java.lang + 1 metrics explicitly defined
+        assertEquals(11, metrics.size());
     }

     @Test
@@ -292,8 +292,8 @@ public void testListParamsExclude() throws Exception {
         run();
         LinkedList<HashMap<String, Object>> metrics = getMetrics();

-        // First filter 13 = 13 metrics from java.lang + 2 metrics explicitly defined - 2 explicitly defined
-        assertEquals(13, metrics.size());
+        // First filter 10 = 10 metrics from java.lang + 2 metrics explicitly defined - 2 explicitly defined
+        assertEquals(10, metrics.size());
     }

     @Test
@@ -308,8 +308,8 @@ public void testListBeansInclude() throws Exception {
         run();
         LinkedList<HashMap<String, Object>> metrics = getMetrics();

-        // First filter 14 = 13 metrics from java.lang + 1 metrics explicitly defined
-        assertEquals(14, metrics.size());
+        // First filter 11 = 10 metrics from java.lang + 1 metrics explicitly defined
+        assertEquals(11, metrics.size());
     }

     @Test
@@ -327,8 +327,8 @@ public void testListBeansRegexInclude() throws Exception {
         run();
         LinkedList<HashMap<String, Object>> metrics = getMetrics();

-        // First filter 15 = 13 metrics from java.lang + 2 metrics explicitly defined
-        assertEquals(15, metrics.size());
+        // First filter 12 = 10 metrics from java.lang + 2 metrics explicitly defined
+        assertEquals(12, metrics.size());
     }

     @Test
@@ -346,8 +346,8 @@ public void testListBeansRegexExclude() throws Exception {
         run();
         LinkedList<HashMap<String, Object>> metrics = getMetrics();

-        // First filter 14 = 13 metrics from java.lang + 1 metrics explicitly defined
-        assertEquals(14, metrics.size());
+        // First filter 11 = 10 metrics from java.lang + 1 metrics explicitly defined
+        assertEquals(11, metrics.size());
     }

     @Test
@@ -365,8 +365,8 @@ public void testListBeansExclude() throws Exception {
         run();
         LinkedList<HashMap<String, Object>> metrics = getMetrics();

-        // First filter 14 = 13 metrics from java.lang + 1 metrics explicitly defined
-        assertEquals(14, metrics.size());
+        // First filter 11 = 10 metrics from java.lang + 1 metrics explicitly defined
+        assertEquals(11, metrics.size());
     }

     @Test
@@ -402,8 +402,8 @@ public void testMetricTypes() throws Exception {
             "env:stage",
             "newTag:test");

-        // 15 = 13 metrics from java.lang + the 3 collected (gauge and histogram)
-        assertEquals(16, metrics.size());
+        // 13 = 10 metrics from java.lang + the 3 collected (gauge and histogram)
+        assertEquals(13, metrics.size());

         assertMetric("test.gauge", 1000.0, commonTags, 5, "gauge");
         assertMetric("test.gauge_by_default", 42.0, commonTags, 5, "gauge");
@@ -413,8 +413,8 @@ public void testMetricTypes() throws Exception {
         run();
         metrics = getMetrics();

-        // 16 = 13 metrics from java.lang + the 4 collected (gauge, histogram and counter)
-        assertEquals(17, metrics.size());
+        // 14 = 10 metrics from java.lang + the 4 collected (gauge, histogram and counter)
+        assertEquals(14, metrics.size());
         assertMetric("test.gauge", 1000.0, commonTags, 5, "gauge");
         assertMetric("test.gauge_by_default", 42.0, commonTags, 5, "gauge");
         assertMetric("test.histogram", 424242, commonTags, 5, "histogram");
@@ -438,8 +438,8 @@ public void testExcludeTags() throws Exception {
             "instance:jmx_test_instance",
             "jmx_domain:org.datadog.jmxfetch.test");

-        // 15 = 13 metrics from java.lang + the 2 collected (gauge and histogram)
-        assertEquals(15, metrics.size());
+        // 12 = 10 metrics from java.lang + the 2 collected (gauge and histogram)
+        assertEquals(12, metrics.size());

         // There should only left 2 tags per metric
         assertMetric("test1.gauge", 1000.0, commonTags, 2, "gauge");
@@ -469,8 +469,8 @@ public void testAdditionalTags() throws Exception {
             "unknown_tag:$does-not-exist",
             "multiple:SimpleTestJavaApp-testName");

-        // 15 = 13 metrics from java.lang + the 2 collected (gauge and histogram)
-        assertEquals(15, metrics.size());
+        // 12 = 10 metrics from java.lang + the 2 collected (gauge and histogram)
+        assertEquals(12, metrics.size());

         // There should only left 2 tags per metric
         assertMetric("test1.gauge", 1000.0, commonTags, 8, "gauge");
@@ -492,9 +492,9 @@ public void testApp() throws Exception {
         run();
         LinkedList<HashMap<String, Object>> metrics = getMetrics();

-        // 29 = 13 metrics from java.lang + the 6 gauges we are explicitly collecting + 9 gauges implicitly collected
+        // 26 = 10 metrics from java.lang + the 6 gauges we are explicitly collecting + 9 gauges implicitly collected
         // + 1 multi-value, see jmx.yaml in the test/resources folder
-        assertEquals(29, metrics.size());
+        assertEquals(26, metrics.size());


         // We test for the presence and the value of the metrics we want to collect
@@ -525,9 +525,9 @@ public void testApp() throws Exception {
         // We run a second collection. The counter should now be present
         run();
         metrics = getMetrics();
-        // 31 = 13 metrics from java.lang + the 6 gauges we are explicitly collecting + 9 gauges implicitly collected
+        // 28 = 10 metrics from java.lang + the 6 gauges we are explicitly collecting + 9 gauges implicitly collected
         // + 1 multi-value + 2 counter, see jmx.yaml in the test/resources folder
-        assertEquals(31, metrics.size());
+        assertEquals(28, metrics.size());


         // We test for the same metrics but this time, the counter should be here
@@ -562,9 +562,9 @@ public void testApp() throws Exception {

         run();
         metrics = getMetrics();
-        // 31 = 13 metrics from java.lang + the 6 gauges we are explicitly collecting + 9 gauges implicitly collected
+        // 28 = 10 metrics from java.lang + the 6 gauges we are explicitly collecting + 9 gauges implicitly collected
         // + 1 multi-value + 2 counter, see jmx.yaml in the test/resources folder
-        assertEquals(31, metrics.size());
+        assertEquals(28, metrics.size());


         // Previous metrics
@@ -608,9 +608,9 @@ public void testAppCanonicalRate() throws Exception {
         run();
         LinkedList<HashMap<String, Object>> metrics = getMetrics();

-        // 28 = 13 metrics from java.lang + the 5 gauges we are explicitly collecting + 9 gauges implicitly collected
+        // 25 = 10 metrics from java.lang + the 5 gauges we are explicitly collecting + 9 gauges implicitly collected
         // + 1 multi-value, see jmx.yaml in the test/resources folder
-        assertEquals(28, metrics.size());
+        assertEquals(25, metrics.size());


         // We test for the presence and the value of the metrics we want to collect
@@ -640,9 +640,9 @@ public void testAppCanonicalRate() throws Exception {
         // We run a second collection. The counter should now be present
         run();
         metrics = getMetrics();
-        // 30 = 13 metrics from java.lang + the 5 gauges we are explicitly collecting + 9 gauges implicitly collected
+        // 27 = 10 metrics from java.lang + the 5 gauges we are explicitly collecting + 9 gauges implicitly collected
         // + 1 multi-value + 2 counter, see jmx.yaml in the test/resources folder
-        assertEquals(30, metrics.size());
+        assertEquals(27, metrics.size());


         // We test for the same metrics but this time, the counter should be here
@@ -674,12 +674,12 @@ public void testAppCanonicalRate() throws Exception {

         run();
         metrics = getMetrics();
-        assertEquals(29, metrics.size());
+        assertEquals(26, metrics.size());

         // The metric should be back in the next cycle.
         run();
         metrics = getMetrics();
-        assertEquals(30, metrics.size());
+        assertEquals(27, metrics.size());
         assertMetric("test.counter", 0.0, commonTags, 5);

         // Check that they are working again
@@ -690,7 +690,7 @@ public void testAppCanonicalRate() throws Exception {

         run();
         metrics = getMetrics();
-        assertEquals(30, metrics.size());
+        assertEquals(27, metrics.size());

         // Previous metrics
         assertMetric("this.is.100", 100.0, commonTags, 8);
@@ -733,7 +733,7 @@ public void testServiceDiscovery() throws Exception {
         LinkedList<HashMap<String, Object>> metrics = getMetrics();

         // 14 = 13 metrics from java.lang + 1 metric explicitly defined in the yaml config file
-        assertEquals(59, metrics.size());
+        assertEquals(47, metrics.size());


         List<String> tags = Arrays.asList(
@@ -799,7 +799,7 @@ public void testServiceDiscoveryLong() throws Exception {
         LinkedList<HashMap<String, Object>> metrics = getMetrics();
         ArrayList<Instance> instances = getInstances();

-        assertEquals(31, metrics.size());
+        assertEquals(25, metrics.size());

         // 2(jmx_alias_match)  + 1 (jmx_sd_pipe_longname discards one)
         assertEquals(2, instances.size());
diff --git a/src/test/java/org/datadog/jmxfetch/TestCommon.java b/src/test/java/org/datadog/jmxfetch/TestCommon.java
index 03aa6cb..031e181 100644
--- a/src/test/java/org/datadog/jmxfetch/TestCommon.java
+++ b/src/test/java/org/datadog/jmxfetch/TestCommon.java
@@ -94,11 +94,14 @@ protected void initApplication(String yamlFileName, String autoDiscoveryPipeFile
         boolean sdEnabled = (autoDiscoveryPipeFile.length() > 0);
         params.add("--reporter");
         params.add("console");
-        params.add("-c");
-        params.add(yamlFileName);
-        params.add("--conf_directory");
-        params.add(confdDirectory);
-        params.add("collect");
+
+        if (confdDirectory != null) {
+            params.add("-c");
+            params.add(yamlFileName);
+            params.add("--conf_directory");
+            params.add(confdDirectory);
+            params.add("collect");
+        }

         if (sdEnabled) {
             params.add(4, "--tmp_directory");
