stages:
  - test

variables:
  REGISTRY: 486234852809.dkr.ecr.us-east-1.amazonaws.com

# From the tagged repo, push the release artifact
test:
  stage: test

  rules:
    # All releases are manual
    - when: manual
      allow_failure: true

  tags:
    - "runner:docker"

  image: registry.ddbuild.io/docker:20.10.13-gbi-focal

  script:
    - set -x
    - set +e

    # Trying out using a name via DNS resolution
    - echo "Creating container http server with name 'srv' and no ports exposed"
    - container_id=$(docker run --name srv -d strm/helloworld-http@sha256:bd44b0ca80c26b5eba984bf498a9c3bab0eb1c59d30d8df3cb2c073937ee4e45)
    - curl -m 30 http://srv

    # Trying out using a name via DNS resolution using custom bridge network
    - echo "Creating container http server with name 'srvv' on network 'mynetwork' and no ports exposed"
    - docker create network mynetwork
    - container_id=$(docker run --network mynetwork --name srvv -d strm/helloworld-http@sha256:bd44b0ca80c26b5eba984bf498a9c3bab0eb1c59d30d8df3cb2c073937ee4e45)
    - curl -m 30 http://srvv
    - docker run --rm --network mynetwork --name mycurl curlimages/curl http://srvv

    # container is created with exposed ports auto-published to host via -P
    - echo "Creating container http server with exposed ports auto-published"
    - container_id=$(docker run -P -d strm/helloworld-http@sha256:bd44b0ca80c26b5eba984bf498a9c3bab0eb1c59d30d8df3cb2c073937ee4e45)
    - container_ip=$(docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' $container_id)
    - echo "Making a request to the container via $container_ip, this works"
    - curl -m 30 http://$container_ip
    - echo "Making a request to the container via host port mapping ($host_mapped_url)"
    - host_mapped_url=$(docker inspect -f '{{range .NetworkSettings.Ports}}{{range .}}{{println .HostIp .HostPort}}{{end}}{{end}}' $container_id | tr ' ' ':' | head -n 1)
    - curl -m 30 http://$host_mapped_url
    - gateway_mapped_url=$(docker inspect -f '{{range .NetworkSettings.Networks}}{{.Gateway}}{{end}}:{{range $port, $bindings := .NetworkSettings.Ports}}{{(index $bindings 0).HostPort}}{{end}}' $container_id)
    - curl -m 30 http://$gateway_mapped_url

    # Next, lets try explicitly binding the exposed port to a fixed host port
    - echo "Creating container http server with exposed ports published to fixed host port"
    - container_id=$(docker run -p 7777:80 -d strm/helloworld-http@sha256:bd44b0ca80c26b5eba984bf498a9c3bab0eb1c59d30d8df3cb2c073937ee4e45)
    - docker inspect -f '{{range .NetworkSettings.Ports}}{{json .}}{{end}}' $container_id
    - host_mapped_url=$(docker inspect -f '{{range .NetworkSettings.Ports}}{{range .}}{{println .HostIp .HostPort}}{{end}}{{end}}' $container_id | tr ' ' ':' | head -n 1)
    - curl -m 30 http://$host_mapped_url
    - gateway_mapped_url=$(docker inspect -f '{{range .NetworkSettings.Networks}}{{.Gateway}}{{end}}:{{range $port, $bindings := .NetworkSettings.Ports}}{{(index $bindings 0).HostPort}}{{end}}' $container_id)
    - curl -m 30 http://$gateway_mapped_url

    # Next, lets try explicitly binding the exposed port to the port 0 (https://github.com/docker/for-mac/issues/5588)
    - echo "Creating container http server with exposed ports published to host port 0 (should trigger auto-allocate behavior)"
    - container_id=$(docker run -p 0:80 -d strm/helloworld-http@sha256:bd44b0ca80c26b5eba984bf498a9c3bab0eb1c59d30d8df3cb2c073937ee4e45)
    - docker inspect -f '{{range .NetworkSettings.Ports}}{{json .}}{{end}}' $container_id
    - host_mapped_url=$(docker inspect -f '{{range .NetworkSettings.Ports}}{{range .}}{{println .HostIp .HostPort}}{{end}}{{end}}' $container_id | tr ' ' ':' | head -n 1)
    - curl -m 30 http://$host_mapped_url
    - gateway_mapped_url=$(docker inspect -f '{{range .NetworkSettings.Networks}}{{.Gateway}}{{end}}:{{range $port, $bindings := .NetworkSettings.Ports}}{{(index $bindings 0).HostPort}}{{end}}' $container_id)
    - curl -m 30 http://$gateway_mapped_url

    # Next, lets try explicitly binding the exposed port to an auto port
    - echo "Creating container http server with exposed ports published to auto port"
    - container_id=$(docker run -p :80 -d strm/helloworld-http@sha256:bd44b0ca80c26b5eba984bf498a9c3bab0eb1c59d30d8df3cb2c073937ee4e45)
    - docker inspect -f '{{range .NetworkSettings.Ports}}{{json .}}{{end}}' $container_id
    - host_mapped_url=$(docker inspect -f '{{range .NetworkSettings.Ports}}{{range .}}{{println .HostIp .HostPort}}{{end}}{{end}}' $container_id | tr ' ' ':' | head -n 1)
    - curl -m 30 http://$host_mapped_url
    - gateway_mapped_url=$(docker inspect -f '{{range .NetworkSettings.Networks}}{{.Gateway}}{{end}}:{{range $port, $bindings := .NetworkSettings.Ports}}{{(index $bindings 0).HostPort}}{{end}}' $container_id)
    - curl -m 30 http://$gateway_mapped_url
